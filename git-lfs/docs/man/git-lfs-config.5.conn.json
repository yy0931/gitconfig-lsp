{
    "lfs.url": {
        "documentation": "The url used to call the Git LFS remote API. Default blank (derive from cloneURL).",
        "autocomplete": true,
        "deprecated": false
    },
    "remote.<remote>.lfsurl": {
        "documentation": "The url used to call the Git LFS remote API. Default blank (derive from cloneURL).",
        "autocomplete": true,
        "deprecated": false
    },
    "lfs.pushurl": {
        "documentation": "The url used to call the Git LFS remote API when pushing. Default blank (derivefrom either LFS non-push urls or clone url).",
        "autocomplete": true,
        "deprecated": false
    },
    "remote.<remote>.lfspushurl": {
        "documentation": "The url used to call the Git LFS remote API when pushing. Default blank (derivefrom either LFS non-push urls or clone url).",
        "autocomplete": true,
        "deprecated": false
    },
    "remote.lfsdefault": {
        "documentation": "The remote used to find the Git LFS remote API.  `lfs.url` and`branch.*.remote` for the current branch override this setting.  If thissetting is not specified and there is exactly one remote, that remote ispicked; otherwise, the default is `origin`.",
        "autocomplete": true,
        "deprecated": false
    },
    "remote.lfspushdefault": {
        "documentation": "The remote used to find the Git LFS remote API when pushing.  `lfs.url` and`branch.*.pushremote` for the current branch override this setting.  If thissetting is not set, `remote.pushdefault` is used, or if that is not set, theorder of selection is used as specified in the `remote.lfsdefault` above.",
        "autocomplete": true,
        "deprecated": false
    },
    "lfs.dialtimeout": {
        "documentation": "Sets the maximum time, in seconds, that the HTTP client will wait to initiatea connection. This does not include the time to send a request and wait for aresponse. Default: 30 seconds",
        "autocomplete": true,
        "deprecated": false
    },
    "lfs.tlstimeout": {
        "documentation": "Sets the maximum time, in seconds, that the HTTP client will wait for a TLShandshake. Default: 30 seconds.",
        "autocomplete": true,
        "deprecated": false
    },
    "lfs.activitytimeout": {
        "documentation": "Sets the maximum time, in seconds, that the HTTP client will wait for thenext tcp read or write. If < 1, no activity timeout is used at all.Default: 30 seconds",
        "autocomplete": true,
        "deprecated": false
    },
    "lfs.https://<host>.activitytimeout": {
        "documentation": "Sets the maximum time, in seconds, that the HTTP client will wait for thenext tcp read or write. If < 1, no activity timeout is used at all.Default: 30 seconds",
        "autocomplete": true,
        "deprecated": false
    },
    "lfs.keepalive": {
        "documentation": "Sets the maximum time, in seconds, for the HTTP client to maintain keepaliveconnections. Default: 30 minutes.",
        "autocomplete": true,
        "deprecated": false
    },
    "lfs.ssh.automultiplex": {
        "documentation": "When using the pure SSH-based protocol, whether to multiplex requests over asingle connection when possible.  This option requires the use of OpenSSH or acompatible SSH client.  Default: true.",
        "autocomplete": true,
        "deprecated": false
    },
    "lfs.ssh.retries": {
        "documentation": "Specifies the number of times Git LFS will attempt to obtain authorization viaSSH before aborting. Default: 5.",
        "autocomplete": true,
        "deprecated": false
    },
    "core.askpass": {
        "documentation": "Given as a program and its arguments, this is invoked when authentication isneeded against the LFS API. The contents of stdout are interpreted as thepassword.",
        "autocomplete": true,
        "deprecated": false
    },
    "lfs.cachecredentials": {
        "documentation": "Enables in-memory SSH and Git Credential caching for a single 'git lfs'command. Default: enabled.",
        "autocomplete": true,
        "deprecated": false
    },
    "lfs.storage": {
        "documentation": "Allow override LFS storage directory. Non-absolute path is relativized toinside of Git repository directory (usually `.git`).\n\nNote: you should not run `git lfs prune` if you have different repositoriessharing the same storage directory.\n\nDefault: `lfs` in Git repository directory (usually `.git/lfs`).",
        "autocomplete": true,
        "deprecated": false
    },
    "lfs.largefilewarning": {
        "documentation": "Warn when a file is 4 GiB or larger. Such files will be corrupted when usingWindows (unless smudging is disabled) with a Git for Windows version less than2.34.0 due to a limitation in Git.  Default: true if the version is less than2.34.0, false otherwise.",
        "autocomplete": true,
        "deprecated": false
    },
    "lfs.concurrenttransfers": {
        "documentation": "The number of concurrent uploads/downloads. Default 8.",
        "autocomplete": true,
        "deprecated": false
    },
    "lfs.basictransfersonly": {
        "documentation": "If set to true, only basic HTTP upload/download transfers will be used,ignoring any more advanced transfers that the client/server may support.This is primarily to work around bugs or incompatibilities.\n\nThe git-lfs client supports basic HTTP downloads, resumable HTTP downloads(using `Range` headers), and resumable uploads via tus.io protocol. Customtransfer methods can be added via `lfs.customtransfer` (see next section).However setting this value to true limits the client to simple HTTP.",
        "autocomplete": true,
        "deprecated": false
    },
    "lfs.tustransfers": {
        "documentation": "If set to true, this enables resumable uploads of LFS objects through thetus.io API. Once this feature is finalized, this setting will be removed,and tus.io uploads will be available for all clients.",
        "autocomplete": true,
        "deprecated": false
    },
    "lfs.standalonetransferagent": {
        "documentation": "Allows the specified custom transfer agent to be used directlyfor transferring files, without asking the server how the transfersshould be made. The custom transfer agent has to be defined in a`lfs.customtransfer.<name>` settings group.",
        "autocomplete": true,
        "deprecated": false
    },
    "lfs.customtransfer.<name>.path": {
        "documentation": "`lfs.customtransfer.<name>` is a settings group which defines a customtransfer hook which allows you to upload/download via an intermediate process,using any mechanism you like (rather than just HTTP). `path` should point tothe process you wish to invoke. The protocol between the git-lfs client andthe custom transfer process is documented athttps://github.com/git-lfs/git-lfs/blob/main/docs/custom-transfers.md\n\n<name> must be a unique identifier that the LFS server understands. Whencalling the LFS API the client will include a list of supported transfertypes. If the server also supports this named transfer type, it will select itand actions returned from the API will be in relation to that transfer type(may not be traditional URLs for example). Only if the server accepts <name>as a transfer it supports will this custom transfer process be invoked.",
        "autocomplete": true,
        "deprecated": false
    },
    "lfs.customtransfer.<name>.args": {
        "documentation": "If the custom transfer process requires any arguments, these can be providedhere.  This string will be expanded by the shell.",
        "autocomplete": true,
        "deprecated": false
    },
    "lfs.customtransfer.<name>.concurrent": {
        "documentation": "If true (the default), git-lfs will invoke the custom transfer processmultiple times in parallel, according to `lfs.concurrenttransfers`, splittingthe transfer workload between the processes.",
        "autocomplete": true,
        "deprecated": false
    },
    "lfs.customtransfer.<name>.direction": {
        "documentation": "Specifies which direction the custom transfer process supports, either\"download\", \"upload\", or \"both\". The default if unspecified is \"both\".",
        "autocomplete": true,
        "deprecated": false
    },
    "lfs.transfer.maxretries": {
        "documentation": "Specifies how many retries LFS will attempt per OID before marking thetransfer as failed. Must be an integer which is at least one. If the value isnot an integer, is less than one, or is not given, a value of eight will beused instead.",
        "autocomplete": true,
        "deprecated": false
    },
    "lfs.transfer.maxretrydelay": {
        "documentation": "Specifies the maximum time in seconds LFS will wait between each retryattempt. LFS uses exponential backoff for retries, doubling the time betweeneach retry until reaching this limit. If a server requests a delay using the`Retry-After` header, the header value overrides the exponential delay forthat attempt and is not limited by this option.\n\nMust be an integer which is not negative. Use zero to disable delays betweenretries unless requested by a server. If the value is not an integer, isnegative, or is not given, a value of ten will be used instead.",
        "autocomplete": true,
        "deprecated": false
    },
    "lfs.transfer.maxverifies": {
        "documentation": "Specifies how many verification requests LFS will attempt per OID beforemarking the transfer as failed, if the object has a verification actionassociated with it. Must be an integer which is at least one. If the value isnot an integer, is less than one, or is not given, a default value of threewill be used instead.",
        "autocomplete": true,
        "deprecated": false
    },
    "lfs.transfer.enablehrefrewrite": {
        "documentation": "If set to true, this enables rewriting href of LFS objects using`url.*.insteadof/pushinsteadof` config. `pushinsteadof` is used only foruploading, and `insteadof` is used for downloading and for uploading when`pushinsteadof` is not set.",
        "autocomplete": true,
        "deprecated": false
    },
    "lfs.allowincompletepush": {
        "documentation": "When pushing, allow objects to be missing from the local cache without haltinga Git push. Default: false.",
        "autocomplete": true,
        "deprecated": false
    },
    "lfs.fetchinclude": {
        "documentation": "When fetching, only download objects which match any entry on thiscomma-separated list of paths/filenames. Wildcard matching is as pergit-ignore(1). See git-lfs-fetch(1) for examples.",
        "autocomplete": true,
        "deprecated": false
    },
    "lfs.fetchexclude": {
        "documentation": "When fetching, do not download objects which match any item on thiscomma-separated list of paths/filenames. Wildcard matching is as pergit-ignore(1). See git-lfs-fetch(1) for examples.",
        "autocomplete": true,
        "deprecated": false
    },
    "lfs.fetchrecentrefsdays": {
        "documentation": "If non-zero, fetches refs which have commits within N days of the currentdate. Only local refs are included unless lfs.fetchrecentremoterefs is true.Also used as a basis for pruning old files.The default is 7 days.",
        "autocomplete": true,
        "deprecated": false
    },
    "lfs.fetchrecentremoterefs": {
        "documentation": "If true, fetches remote refs (for the remote you're fetching) as well as localrefs in the recent window. This is useful to fetch objects for remote branchesyou might want to check out later. The default is true; if you set this tofalse, fetching for those branches will only occur when you either check themout (losing the advantage of fetch --recent), or create a tracking localbranch separately then fetch again.",
        "autocomplete": true,
        "deprecated": false
    },
    "lfs.fetchrecentcommitsdays": {
        "documentation": "In addition to fetching at refs, also fetches previous changes made within Ndays of the latest commit on the ref. This is useful if you're often reviewingrecent changes.   Also used as a basis for pruning old files.The default is 0 (no previous changes).",
        "autocomplete": true,
        "deprecated": false
    },
    "lfs.fetchrecentalways": {
        "documentation": "Always operate as if --recent was included in a `git lfs fetch` call. Defaultfalse.",
        "autocomplete": true,
        "deprecated": false
    },
    "lfs.pruneoffsetdays": {
        "documentation": "The number of days added to the `lfs.fetchrecent*` settings to determine whatcan be pruned. Default is 3 days, i.e. that anything fetched at the veryoldest edge of the 'recent window' is eligible for pruning 3 days later.",
        "autocomplete": true,
        "deprecated": false
    },
    "lfs.pruneremotetocheck": {
        "documentation": "Set the remote that LFS files must have been pushed to in order for them tobe considered eligible for local pruning. Also the remote which is called if--verify-remote is enabled.",
        "autocomplete": true,
        "deprecated": false
    },
    "lfs.pruneverifyremotealways": {
        "documentation": "Always run `git lfs prune` as if `--verify-remote` was provided.",
        "autocomplete": true,
        "deprecated": false
    },
    "lfs.extension.<name>.<setting>": {
        "documentation": "Git LFS extensions enable the manipulation of files streams during smudge andclean. `name` groups the settings for a single extension, and the settingsare:* `clean` The command which runs when files are added to the index* `smudge` The command which runs when files are written to the working copy* `priority` The order of this extension compared to others",
        "autocomplete": true,
        "deprecated": false
    },
    "lfs.<url>.access": {
        "documentation": "Note: this setting is normally set by LFS itself on receiving a 401 response(authentication required), you don't normally need to set it manually.\n\nIf set to \"basic\" then credentials will be requested before making batchrequests to this url, otherwise a public request will initially be attempted.",
        "autocomplete": true,
        "deprecated": false
    },
    "lfs.<url>.locksverify": {
        "documentation": "Determines whether locks are checked before Git pushes. This prevents you frompushing changes to files that other users have locked. The Git LFS pre-pushhook varies its behavior based on the value of this config key.\n\n* `null` - In the absence of a value, Git LFS will attempt the call, and warnif it returns an error. If the response is valid, Git LFS will set the valueto `true`, and will halt the push if the user attempts to update a file lockedby another user. If the server returns a `501 Not Implemented` response, GitLFS will set the value to `false.`* `true` - Git LFS will attempt to verify locks, halting the Git push if thereare any server issues, or if the user attempts to update a file locked byanother user.* `false` - Git LFS will completely skip the lock check in the pre-push hook.You should set this if you're not using File Locking, or your Git serververifies locked files on pushes automatically.\n\nSupports URL config lookup as described in:https://git-scm.com/docs/git-config#git-config-httplturlgt. To set this valueper-host: `git config --global lfs.https://github.com/.locksverify [true|false]`.",
        "autocomplete": true,
        "deprecated": false
    },
    "lfs.<url>.contenttype": {
        "documentation": "Determines whether Git LFS should attempt to detect an appropriate HTTP`Content-Type` header when uploading using the 'basic' upload adapter. If setto false, the default header of `Content-Type: application/octet-stream` ischosen instead. Default: 'true'.",
        "autocomplete": true,
        "deprecated": false
    },
    "lfs.skipdownloaderrors": {
        "documentation": "Causes Git LFS not to abort the smudge filter when a download error isencountered, which allows actions such as checkout to work when you are unableto download the LFS content. LFS files which could not download will containpointer content instead.\n\nNote that this will result in git commands which call the smudge filter toreport success even in cases when LFS downloads fail, which may affectscripts.\n\nYou can also set the environment variable GIT_LFS_SKIP_DOWNLOAD_ERRORS=1 toget the same effect.",
        "autocomplete": true,
        "deprecated": false
    },
    "lfs.forceprogress": {
        "documentation": "Controls whether Git LFS will suppress progress status when the standardoutput stream is not attached to a terminal. The default is `false` whichmakes Git LFS detect whether stdout is a terminal and suppress progress whenit's not; you can disable this behaviour and force progress status even whenstandard output stream is not a terminal by setting either variable to 1,'yes' or 'true'.",
        "autocomplete": true,
        "deprecated": false
    },
    "lfs.setlockablereadonly": {
        "documentation": "These settings, the first an environment variable and the second a gitconfigsetting, control whether files marked as 'lockable' in `git lfs track` aremade read-only in the working copy when not locked by the current user.The default is `true`; you can disable this behaviour and have all fileswriteable by setting either variable to 0, 'no' or 'false'.",
        "autocomplete": true,
        "deprecated": false
    },
    "lfs.lockignoredfiles": {
        "documentation": "This setting controls whether Git LFS will set ignored files that match thelockable pattern read only as well as tracked files. The default is `false`;you can enable this behavior by setting the variable to 1, 'yes', or 'true'.",
        "autocomplete": true,
        "deprecated": false
    },
    "lfs.defaulttokenttl": {
        "documentation": "This setting sets a default token TTL when git-lfs-authenticate does notinclude the TTL in the JSON response but still enforces it.\n\nNote that this is only necessary for larger repositories hosted on LFSservers that don't include the TTL.",
        "autocomplete": true,
        "deprecated": false
    }
}